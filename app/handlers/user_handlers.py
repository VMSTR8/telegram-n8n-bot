import logging

from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command, CommandStart

from app.services import UserService, ChatService, SurveyService
from app.decorators import validate_callsign_create, required_user_registration, required_chat_bind


class UserHandlers:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
    """

    def __init__(self):
        self.router = Router()
        self.user_service = UserService()
        self.chat_service = ChatService()
        self.survey_service = SurveyService()
        self._register_handlers()

    def _register_handlers(self) -> None:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –≤ —Ä–æ—É—Ç–µ—Ä–µ.

        :return: None
        """
        self.router.message(CommandStart())(self.start_command)
        self.router.message(Command('help'))(self.help_command)
        self.router.message(Command('reg'))(self.register_command)
        self.router.message(Command('update'))(self.update_command)
        self.router.message(Command('profile'))(self.profile_command)
        self.router.message(Command('surveys'))(self.surveys_command)

    @staticmethod
    async def start_command(message: Message) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.

        :param message: Message - –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :return: None
        """
        start_text = (
            'üöÄ _"–°—Ç–∞—Ä—Ç—É–µ–º!"_\n\n'
            'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞–º–∏!\n\n'
            '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π:\n'
            '`/reg –ø–æ–∑—ã–≤–Ω–æ–π`\n\n'
            '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–æ–∑—ã–≤–Ω–æ–º—É:\n'
            'üî§ –¢–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã\n'
            'üìè –î–ª–∏–Ω–∞ –æ—Ç 1 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤\n'
            'üö´ –ë–µ–∑ —Ü–∏—Ñ—Ä, —Å–ø–µ—Ü —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤\n'
            'üÜî –ü–æ–∑—ã–≤–Ω–æ–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º'
        )

        await message.answer(text=start_text, parse_mode='Markdown')

    @staticmethod
    async def help_command(message: Message) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ.

        :param message: Message - –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :return: None
        """
        help_text = (
            'üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n'
            'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n'
            '‚Ä¢ `/reg –ø–æ–∑—ã–≤–Ω–æ–π` - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ\n'
            '‚Ä¢ `/update –ø–æ–∑—ã–≤–Ω–æ–π` - –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑—ã–≤–Ω–æ–π –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è\n'
            '‚Ä¢ `/profile` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ\n'
            '‚Ä¢ `/surveys` - –°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤\n'
            '‚Ä¢ `/help` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n'
            'üîß –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:\n'
            '‚Ä¢ `/bind` - –ü—Ä–∏–≤—è–∑–∞—Ç—å —á–∞—Ç –∫ –±–æ—Ç–∞\n'
            '‚Ä¢ `/unbind` - –û—Ç–≤—è–∑–∞—Ç—å —á–∞—Ç –æ—Ç –±–æ—Ç–∞\n'
            '‚Ä¢ `/bind_thread` - –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ç—Ä–µ–¥ –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –ø–æ –æ–ø—Ä–æ—Å–∞–º\n'
            '‚Ä¢ `/unbind_thread` - –°–Ω—è—Ç—å —Ç—Ä–µ–¥ –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –ø–æ –æ–ø—Ä–æ—Å–∞–º\n'
            '‚Ä¢ `/reserve –ø–æ–∑—ã–≤–Ω–æ–π` - –ü–æ–≤–µ—Å–∏—Ç—å –∏–ª–∏ —Å–Ω—è—Ç—å –±—Ä–æ–Ω—å –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–æ–≤ '
            '–¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n'
            'üëë –°–æ–∑–¥–∞—Ç–µ–ª—å:\n'
            '‚Ä¢ `/add_admin –ø–æ–∑—ã–≤–Ω–æ–π` - –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n'
            '‚Ä¢ `/remove_admin –ø–æ–∑—ã–≤–Ω–æ–π` - –£–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n'
            '‚Ä¢ `/admin_list` - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n'
            '‚Ä¢ `/create_survey –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ä–µ–º—è_–æ–∫–æ–Ω—á–∞–Ω–∏—è` - –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å\n'
        )
        await message.reply(text=help_text, parse_mode='Markdown')

    @validate_callsign_create
    async def register_command(self, message: Message, callsign: str) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reg. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–æ–∑—ã–≤–Ω—ã–º.

        :param message: Message - –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param callsign: str - –ø–æ–∑—ã–≤–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :return: None
        """
        try:
            user_exists = await self.user_service.get_user_by_telegram_id(message.from_user.id)
            if user_exists:
                await message.reply(
                    text=f'‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n'
                         f'–í–∞—à –ø–æ–∑—ã–≤–Ω–æ–π: {user_exists.callsign.capitalize()}\n',
                    parse_mode='Markdown'
                )
                return

            user = await self.user_service.create_user(
                telegram_id=message.from_user.id,
                callsign=callsign.lower(),
                first_name=message.from_user.first_name.lower(),
                last_name=message.from_user.last_name.lower(),
                username=message.from_user.username.lower()
            )

            await message.reply(
                text=f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!\n'
                     f'–ü–æ–∑—ã–≤–Ω–æ–π: {user.callsign.capitalize()}\n'
                     f'–ò–º—è: {user.first_name.capitalize() if user.first_name else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n'
                     f'–§–∞–º–∏–ª–∏—è: {user.last_name.capitalize() if user.last_name else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n'
                     f'Username: {f'@{user.username}' if user.username else 'username –Ω–µ —É–∫–∞–∑–∞–Ω'}',
                parse_mode='Markdown'
            )

        except ValueError as e:
            await message.reply(f'‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}')
        except Exception as e:
            await message.reply(
                '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
            )
            logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}')

    @required_user_registration
    async def update_command(self, message: Message) -> None:
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        pass

    @required_user_registration
    async def profile_command(self, message: Message) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        :param message: Message - –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :return: None
        """
        user = await self.user_service.get_user_by_telegram_id(message.from_user.id)

        profile_text = (
            f'üë§ *–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n'
            f'üÜî –ü–æ–∑—ã–≤–Ω–æ–π: `{user.callsign}'
            f'üë§ –ò–º—è: {user.first_name.capitalize() if user.first_name else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n'
            f'üë• –§–∞–º–∏–ª–∏—è: {user.last_name.capitalize() if user.last_name else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n'
            f'üîó Username: {f'@{user.username}' if user.username else 'username –Ω–µ —É–∫–∞–∑–∞–Ω'}\n'
            f'üìÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user.created_at.strftime('%Y-%m-%d %H:%M:%S')}\n'
            f'üîÑ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω: {user.updated_at.strftime('%Y-%m-%d %H:%M:%S')}\n'
            f'üõ°Ô∏è –ë—Ä–æ–Ω—å –æ—Ç –æ–ø—Ä–æ—Å–æ–≤: {'–ï—Å—Ç—å' if user.reserved else '–ù–µ—Ç'}\n'
            f'‚öôÔ∏è –†–æ–ª—å: {user.role.value.capitalize()}'
        )

        await message.reply(text=profile_text, parse_mode='Markdown')

    @required_chat_bind
    @required_user_registration
    async def surveys_command(self, message: Message) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /surveys. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤
        —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏.

        :param message: Message - –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :return: None
        """
        active_surveys = await self.survey_service.get_active_surveys()

        if not active_surveys:
            await message.reply(
                text='–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤\n¬Ø\_(„ÉÑ)_/¬Ø',
                parse_mode='Markdown'
            )
            return

        surveys_text = 'üìã *–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã:*\n\n'
        for survey in active_surveys:
            surveys_text += (
                f'‚Ä¢ *{survey.title}*\n'
                f'  üîó [–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø—Ä–æ—Å—É]({survey.form_url})\n'
                f'  üïí –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {survey.ended_at.strftime('%Y-%m-%d %H:%M:%S')}\n\n'
            )

        await message.reply(text=surveys_text, parse_mode='Markdown')
