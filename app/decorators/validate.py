import re
import logging
from datetime import datetime
from functools import wraps
from typing import Any, Awaitable, Callable

from aiogram.types import Message

from app.services import MessageQueueService
from app.utils import validate_callsign_format, validate_datetime_format

from config import settings


class CallsignDecorators:
    """
    Class containing decorators for callsign validation.
    Works with methods of classes, not regular functions.
    """

    def __init__(self):
        self.message_queue_service = MessageQueueService()

    @staticmethod
    def validate_callsign_create(func: Callable[..., Awaitable[Any]]) -> Callable[..., Awaitable[Any]]:
        """
        Decorator for validating callsign in the /reg command.
        Checks that the callsign meets the requirements:
        - Only Latin letters
        - Length from 1 to 20 characters
        - No digits, special characters, or spaces
        - Callsign must be unique
        If the callsign is invalid, sends an error message and does not call the main function

        :param func: Function to be decorated
        :return: Wrapped asynchronous function with the same arguments 
        as the original function
        """

        @wraps(func)
        async def wrapper(self, message: Message, *args: Any, **kwargs: Any) -> Any:
            if not message.text:
                await self.message_queue_service.send_message(
                    chat_id=message.chat.id,
                    text='‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n'
                         '–û—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É `/reg –ø–æ–∑—ã–≤–Ω–æ–π`\n'
                         '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–∏—á–µ–≥–æ, –∫—Ä–æ–º–µ —Ç–µ–∫—Å—Ç–∞!',
                    parse_mode='Markdown',
                    message_id=message.message_id
                )
                return

            command_parts = message.text.split()
            if len(command_parts) != 2:
                await self.message_queue_service.send_message(
                    chat_id=message.chat.id,
                    text='‚ùå –ù—É–∂–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –ø–æ–∑—ã–≤–Ω–æ–π '
                         '(–æ–¥–Ω–æ —Å–ª–æ–≤–æ) '
                         '–≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –ø–æ–ª–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n\n'
                         '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/reg –ø–æ–∑—ã–≤–Ω–æ–π`\n\n'
                         '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–æ–∑—ã–≤–Ω–æ–º—É:\n'
                         'üî§ –¢–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã\n'
                         'üìè –î–ª–∏–Ω–∞ –æ—Ç 1 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤\n'
                         'üö´ –ë–µ–∑ —Ü–∏—Ñ—Ä, —Å–ø–µ—Ü —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤\n'
                         'üÜî –ü–æ–∑—ã–≤–Ω–æ–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º',
                    parse_mode='Markdown',
                    message_id=message.message_id
                )
                return

            callsign = command_parts[1].strip()

            validation_result = await validate_callsign_format(callsign)
            if not validation_result.is_valid:
                await self.message_queue_service.send_message(
                    chat_id=message.chat.id,
                    text=f'‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–∑—ã–≤–Ω–æ–≥–æ.\n\n'
                         f'{validation_result.error_message}\n\n'
                         f'–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/reg –ø–æ–∑—ã–≤–Ω–æ–π`\n\n'
                         f'–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–æ–∑—ã–≤–Ω–æ–º—É:\n'
                         f'üî§ –¢–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã\n'
                         f'üìè –î–ª–∏–Ω–∞ –æ—Ç 1 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤\n'
                         f'üö´ –ë–µ–∑ —Ü–∏—Ñ—Ä, —Å–ø–µ—Ü —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤\n'
                         f'üÜî –ü–æ–∑—ã–≤–Ω–æ–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º',
                    parse_mode='Markdown',
                    message_id=message.message_id
                )
                return

            return await func(self, message, callsign, *args, **kwargs)

        return wrapper

    @staticmethod
    def validate_callsign_update(func: Callable[..., Awaitable[Any]]) -> Callable[..., Awaitable[Any]]:
        """
        Decorator for validating callsign in the /update command.
        If a callsign is provided, checks that it meets the requirements:
        - Only Latin letters
        - Length from 1 to 20 characters
        - No digits, special characters, or spaces
        - Callsign must be unique
        If the callsign is invalid, sends an error message and does not call the main function

        :param func: Function to be decorated
        :return: Wrapped asynchronous function with the same arguments 
        as the original function
        """

        @wraps(func)
        async def wrapper(self, message: Message, *args: Any, **kwargs: Any) -> Any:
            if not message.text:
                await self.message_queue_service.send_message(
                    chat_id=message.chat.id,
                    text='‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n'
                         '–û—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É `/update –ø–æ–∑—ã–≤–Ω–æ–π`\n'
                         '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–∏—á–µ–≥–æ, –∫—Ä–æ–º–µ —Ç–µ–∫—Å—Ç–∞!',
                    parse_mode='Markdown',
                    message_id=message.message_id
                )
                return

            command_parts = message.text.split()

            if len(command_parts) >= 2:

                callsign = command_parts[1].strip()

                validation_result = await validate_callsign_format(callsign)

                if not validation_result.is_valid:
                    await self.message_queue_service.send_message(
                        chat_id=message.chat.id,
                        text=f'‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–∑—ã–≤–Ω–æ–≥–æ.\n\n'
                             f'{validation_result.error_message}\n\n'
                             f'–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/update –ø–æ–∑—ã–≤–Ω–æ–π`\n\n'
                             f'–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–æ–∑—ã–≤–Ω–æ–º—É:\n'
                             f'üî§ –¢–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã\n'
                             f'üìè –î–ª–∏–Ω–∞ –æ—Ç 1 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤\n'
                             f'üö´ –ë–µ–∑ —Ü–∏—Ñ—Ä, —Å–ø–µ—Ü —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤\n'
                             f'üÜî –ü–æ–∑—ã–≤–Ω–æ–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º',
                        parse_mode='Markdown',
                        message_id=message.message_id
                    )
                    return

            return await func(self, message, *args, **kwargs)

        return wrapper


class SurveyCreationDecorators:
    """
    Class containing decorators for survey creation validation.
    Works with methods of classes, not regular functions.
    """

    def __init__(self):
        self.message_queue_service = MessageQueueService()

    @staticmethod
    def validate_survey_create(func: Callable[..., Awaitable[Any]]) -> Callable[..., Awaitable[Any]]:
        """
        Decorator for validating survey creation in the /create_survey command.
        Checks that the command parameters meet the requirements:
        - Survey name is not empty and does not exceed 100 characters
        - End date and time are provided in the correct format (YYYY-MM-DD HH:MM)
        - End date and time are in the future
        If the parameters are invalid, sends an error message and does not call the main function

        :param func: Function to be decorated
        :return: Wrapped asynchronous function with the same arguments 
        as the original function
        """
        @wraps(func)
        async def wrapper(self, message: Message, *args: Any, **kwargs: Any) -> Any:
            if not message.text:
                await self.message_queue_service.send_message(
                    chat_id=message.chat.id,
                    text=(
                        '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n'
                        '–û—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É `/create_survey '
                        '–ù–∞–∑–≤–∞–Ω–∏–µ_–æ–ø—Ä–æ—Å–∞ + –í—Ä–µ–º—è_–æ–∫–æ–Ω—á–∞–Ω–∏—è_–æ–ø—Ä–æ—Å–∞ `\n'
                        '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–∏—á–µ–≥–æ, –∫—Ä–æ–º–µ —Ç–µ–∫—Å—Ç–∞!'),
                    parse_mode='Markdown',
                    message_id=message.message_id
                )
                return

            text_after_command = message.text[len('/create_survey '):].strip()

            if not text_after_command:
                await self.message_queue_service.send_message(
                    chat_id=message.chat.id,
                    text=(
                        '‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ '
                        '—Ç–∞–∫ –∫–∞–∫ –Ω–µ –±—ã–ª–∏ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞.\n\n'
                        '–û—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É `/create_survey '
                        '–ù–∞–∑–≤–∞–Ω–∏–µ_–æ–ø—Ä–æ—Å–∞ + –í—Ä–µ–º—è_–æ–∫–æ–Ω—á–∞–Ω–∏—è_–æ–ø—Ä–æ—Å–∞`\n\n'
                        '–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã:\n'
                        '`/create_survey –ú–µ—Å–∏–º –≥–æ–≤–Ω–æ 24 —á–∞—Å–∞ –Ω–∞ –±—Ä–æ–Ω–µ + 2025-01-01 23:59`\n\n'
                        '–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n`YYYY-MM-DD HH:MM`\n'
                        '–∏ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.'
                    ),
                    parse_mode='Markdown',
                    message_id=message.message_id
                )
                return

            parts = text_after_command.rsplit(' + ', 1)


            if len(parts) != 2:
                await self.message_queue_service.send_message(
                    chat_id=message.chat.id,
                    text=(
                        '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n'
                        '–û—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É `/create_survey '
                        '–ù–∞–∑–≤–∞–Ω–∏–µ_–æ–ø—Ä–æ—Å–∞ + –í—Ä–µ–º—è_–æ–∫–æ–Ω—á–∞–Ω–∏—è_–æ–ø—Ä–æ—Å–∞`\n\n'
                        '–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã:\n'
                        '`/create_survey –ú–µ—Å–∏–º –≥–æ–≤–Ω–æ 24 —á–∞—Å–∞ –Ω–∞ –±—Ä–æ–Ω–µ + 2025-01-01 23:59`\n\n'
                        '–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n`YYYY-MM-DD HH:MM`\n'
                        '–∏ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.'
                    ),
                    parse_mode='Markdown',
                    message_id=message.message_id
                )
                return

            survey_name = parts[0].strip()
            end_datetime_str = parts[1].strip()

            if not survey_name:
                await self.message_queue_service.send_message(
                    chat_id=message.chat.id,
                    text=(
                        '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.\n'
                        '–û—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É `/create_survey '
                        '–ù–∞–∑–≤–∞–Ω–∏–µ_–æ–ø—Ä–æ—Å–∞ + –í—Ä–µ–º—è_–æ–∫–æ–Ω—á–∞–Ω–∏—è_–æ–ø—Ä–æ—Å–∞`\n\n'
                        '–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã:\n'
                        '`/create_survey –ú–µ—Å–∏–º –≥–æ–≤–Ω–æ 24 —á–∞—Å–∞ –Ω–∞ –±—Ä–æ–Ω–µ + 2025-01-01 23:59`\n\n'
                        '–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n`YYYY-MM-DD HH:MM`\n'
                        '–∏ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.'),
                    parse_mode='Markdown',
                    message_id=message.message_id
                )
                return

            validation_datetime_result = await validate_datetime_format(end_datetime_str)

            if not validation_datetime_result.is_valid:
                await self.message_queue_service.send_message(
                    chat_id=message.chat.id,
                    text=(
                        f'‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏.\n\n'
                        f'{validation_datetime_result.error_message}\n\n'
                        f'–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n`YYYY-MM-DD HH:MM`\n'
                        f'–∏ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.'),
                    parse_mode='Markdown',
                    message_id=message.message_id
                )
                return

            if len(survey_name) > 100:
                await self.message_queue_service.send_message(
                    chat_id=message.chat.id,
                    text=(
                        '‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞.\n\n'
                        '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞ - 100 —Å–∏–º–≤–æ–ª–æ–≤.'),
                    parse_mode='Markdown',
                    message_id=message.message_id
                )
                return
            
            end_datetime = validation_datetime_result.parsed_datetime

            return await func(self, message, survey_name, end_datetime, *args, **kwargs)

        return wrapper
