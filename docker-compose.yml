services:
  traefik:
    image: traefik:v2.11
    container_name: traefik
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.traefik.address=:8080
      - --certificatesresolvers.myresolver.acme.tlschallenge=true
      - --certificatesresolvers.myresolver.acme.email=${ACME_EMAIL}
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      - --accesslog=true
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.${WEBHOOK_DOMAIN}`)"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=myresolver"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.middlewares=dashboard-auth"
      - "traefik.http.middlewares.dashboard-auth.basicauth.users=${DASHBOARD_USER}:${DASHBOARD_PASS}"
    profiles: [ production ]
    restart: unless-stopped
    networks:
      - traefik-network

  postgres:
    image: postgres:15
    container_name: postgresql
    environment:
      POSTGRES_DB: ${DATABASE__BASENAME}
      POSTGRES_USER: ${DATABASE__USER}
      POSTGRES_PASSWORD: ${DATABASE__PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DATABASE__USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles: [ production ]
    restart: unless-stopped
    networks:
      - traefik-network

  # rabbitmq:
  #   image: rabbitmq:3.13-management
  #   container_name: rabbitmq
  #   environment:
  #     RABBITMQ_USER: ${RMQ_USER}
  #     RABBITMQ_PASS: ${RMQ_PASSWORD}
  #     RABBITMQ_VHOST: ${RMQ_VHOST}
  #   ports:
  #     - "5672:5672"
  #     - "15672:15672"
  #   volumes:
  #     - rabbitmq_data:/var/lib/rabbitmq
  #     - ./app/messaging/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
  #     - ./app/messaging/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
  #   healthcheck:
  #     test: ["CMD", "rabbitmq-diagnostics", "ping"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #   profiles: [ production ]
  #   restart: unless-stopped
  #   networks:
  #     - traefik-network
  
  # celery_worker:
  #   build: .
  #   container_name: celery_worker
  #   command: celery -A app.celery_tasks worker --loglevel=info
  #   depends_on:
  #     - rabbitmq
  #   environment:
  #     - CELERY_BROKER_URL=amqp://${RMQ_USER}:${RMQ_PASSWORD}@${RMQ_HOST}:${RMQ_PORT}/${RMQ_VHOST}
  #     - CELERY_RESULT_BACKEND=rpc://
  #   profiles: [ production ]
  #   restart: unless-stopped
  #   networks:
  #     - traefik-network

  api:
    build: .
    container_name: telegramBotAPI
    environment:
      - TELEGRAM__BOT_TOKEN=${TELEGRAM__BOT_TOKEN}
      - TELEGRAM__CREATOR_ID=${TELEGRAM__CREATOR_ID}
      - TELEGRAM__WEBHOOK_URL=${TELEGRAM__WEBHOOK_URL}
      - TELEGRAM__WEBHOOK_SECRET=${TELEGRAM__WEBHOOK_SECRET}
      - DATABASE__HOST=${DATABASE__HOST}
      - DATABASE__PORT=${DATABASE__PORT}
      - DATABASE__USER=${DATABASE__USER}
      - DATABASE__PASSWORD=${DATABASE__PASSWORD}
      - DATABASE__BASENAME=${DATABASE__BASENAME}
      - TZ=${TIMEZONE}
      - POLLING_MODE=${POLLING_MODE} # False for webhook mode, True for polling mode
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_DEFAULT_PASS}
      - RABBITMQ_VHOST=${RABBITMQ_DEFAULT_VHOST}
    expose:
      - "8000"
    depends_on:
      postgres:
        condition: service_healthy
      traefik:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./migrations:/app/migrations
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.telegram-bot.rule=Host(`${WEBHOOK_DOMAIN}`)"
      - "traefik.http.routers.telegram-bot.entrypoints=websecure"
      - "traefik.http.routers.telegram-bot.tls=true"
      - "traefik.http.routers.telegram-bot.tls.certresolver=myresolver"
      - "traefik.http.services.telegram-bot.loadbalancer.server.port=8000"
      - "traefik.http.routers.telegram-bot.middlewares=telegram-webhook-headers"
      - "traefik.http.middlewares.telegram-webhook-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.middlewares.telegram-webhook-headers.headers.customrequestheaders.X-Forwarded-Port=443"
    restart: unless-stopped
    profiles: [ production ]
    networks:
      - traefik-network

  postgres_dev:
    image: postgres:15
    container_name: postgresql_dev
    environment:
      POSTGRES_DB: ${DATABASE__BASENAME}
      POSTGRES_USER: ${DATABASE__USER}
      POSTGRES_PASSWORD: ${DATABASE__PASSWORD}
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DATABASE__USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles: [ development ]
    restart: unless-stopped

  dev:
    build: .
    container_name: telegramBot_polling_dev
    environment:
      - TELEGRAM__BOT_TOKEN=${TELEGRAM__BOT_TOKEN}
      - TELEGRAM__CREATOR_ID=${TELEGRAM__CREATOR_ID}
      - TELEGRAM__WEBHOOK_URL=${TELEGRAM__WEBHOOK_URL}
      - TELEGRAM__WEBHOOK_SECRET=${TELEGRAM__WEBHOOK_SECRET}
      - DATABASE__HOST=${DATABASE__HOST}
      - DATABASE__PORT=${DATABASE__PORT}
      - DATABASE__USER=${DATABASE__USER}
      - DATABASE__PASSWORD=${DATABASE__PASSWORD}
      - DATABASE__BASENAME=${DATABASE__BASENAME}
      - TZ=${TIMEZONE}
      - POLLING_MODE=True # Polling mode is always True for dev
    depends_on:
      postgres_dev:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./migrations:/app/migrations
    profiles: [ development ]
    restart: unless-stopped

volumes:
  postgres_data:
  postgres_dev_data:
  rabbitmq_data:

networks:
  traefik-network:
    external: false
