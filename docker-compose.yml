# Production services
services:
  traefik:
    image: traefik:v2.11
    container_name: traefik
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.traefik.address=:8080
      - --certificatesresolvers.myresolver.acme.tlschallenge=true
      - --certificatesresolvers.myresolver.acme.email=${ACME_EMAIL}
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      - --accesslog=true
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.${WEBHOOK_DOMAIN}`)"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=myresolver"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.middlewares=dashboard-auth"
      - "traefik.http.middlewares.dashboard-auth.basicauth.users=${DASHBOARD_USER}:${DASHBOARD_PASS}"
    profiles: [ production ]
    restart: unless-stopped
    networks:
      - traefik-network

  postgres:
    image: postgres:15
    container_name: postgresql
    environment:
      POSTGRES_DB: ${DATABASE__BASENAME}
      POSTGRES_USER: ${DATABASE__USER}
      POSTGRES_PASSWORD: ${DATABASE__PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DATABASE__USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles: [ production ]
    restart: unless-stopped
    networks:
      - traefik-network
  
  create-n8n_db:
    image: postgres:15
    container_name: create_n8n_db
    environment:
      - POSTGRES_USER=${DATABASE__USER}
      - POSTGRES_PASSWORD=${DATABASE__PASSWORD}
      - POSTGRES_DB=${DATABASE__BASENAME}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./init-scripts:/init-scripts
    command: sh /init-scripts/create_n8n_db.sh
    profiles: [ production ]
    restart: "no"
    networks:
      - traefik-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ__USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ__PASSWORD}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    profiles: [ production, development ]
    restart: unless-stopped
    networks:
      - traefik-network
  
  celery_worker:
    image: vmstr8/telegram-n8n-bot:latest
    container_name: celery_worker
    command: celery -A app.celery_app worker --loglevel=info
    environment:
      - TELEGRAM__BOT_TOKEN=${TELEGRAM__BOT_TOKEN}
      - TELEGRAM__CREATOR_ID=${TELEGRAM__CREATOR_ID}
      - DATABASE__HOST=${DATABASE__HOST}
      - DATABASE__PORT=${DATABASE__PORT}
      - DATABASE__USER=${DATABASE__USER}
      - DATABASE__PASSWORD=${DATABASE__PASSWORD}
      - DATABASE__BASENAME=${DATABASE__BASENAME}
      - RABBITMQ__HOST=${RABBITMQ__HOST}
      - RABBITMQ__PORT=${RABBITMQ__PORT}
      - RABBITMQ__USER=${RABBITMQ__USER}
      - RABBITMQ__PASSWORD=${RABBITMQ__PASSWORD}
      - TZ=${TIMEZONE}
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    profiles: [ production, development ]
    restart: unless-stopped
    networks:
      - traefik-network

  api:
    image: vmstr8/telegram-n8n-bot:latest
    container_name: fastapi_app
    environment:
      - TELEGRAM__BOT_TOKEN=${TELEGRAM__BOT_TOKEN}
      - TELEGRAM__CREATOR_ID=${TELEGRAM__CREATOR_ID}
      - TELEGRAM__WEBHOOK_URL=${TELEGRAM__WEBHOOK_URL}
      - TELEGRAM__WEBHOOK_SECRET=${TELEGRAM__WEBHOOK_SECRET}
      - DATABASE__HOST=${DATABASE__HOST}
      - DATABASE__PORT=${DATABASE__PORT}
      - DATABASE__USER=${DATABASE__USER}
      - DATABASE__PASSWORD=${DATABASE__PASSWORD}
      - DATABASE__BASENAME=${DATABASE__BASENAME}
      - RABBITMQ__HOST=${RABBITMQ__HOST}
      - RABBITMQ__PORT=${RABBITMQ__PORT}
      - RABBITMQ__USER=${RABBITMQ__USER}
      - RABBITMQ__PASSWORD=${RABBITMQ__PASSWORD}
      - TZ=${TIMEZONE}
      - POLLING_MODE=${POLLING_MODE} # False for webhook mode, True for polling mode
      - N8N_WEBHOOK_URL=${N8N_WEBHOOK_URL}
      - N8N_WEBHOOK_SECRET=${N8N_WEBHOOK_SECRET}
      - N8N_WEBHOOK_HEADER=${N8N_WEBHOOK_HEADER}
    expose:
      - "8000"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      traefik:
        condition: service_started
    volumes:
      - ./logs:/app/logs
      - ./migrations:/app/migrations
    labels:
      - "traefik.enable=true"
      # Service definition
      - "traefik.http.services.telegram-bot.loadbalancer.server.port=8000"
      
      # Middleware definitions for IP whitelists
      - "traefik.http.middlewares.webhook-whitelist.ipwhitelist.sourcerange=${WHITELIST__LOCALHOST},${WHITELIST__TELEGRAM_IPS},${WHITELIST__ADDITIONAL_IPS}"
      - "traefik.http.middlewares.api-whitelist.ipwhitelist.sourcerange=${WHITELIST__LOCALHOST},${WHITELIST__ADDITIONAL_IPS}"
      # Middleware for headers (used by both routers)
      - "traefik.http.middlewares.telegram-webhook-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.middlewares.telegram-webhook-headers.headers.customrequestheaders.X-Forwarded-Port=443"

      # Router for /webhook (higher priority to match first)
      - "traefik.http.routers.telegram-bot-webhook.rule=Host(`${WEBHOOK_DOMAIN}`) && PathPrefix(`/webhook`)"
      - "traefik.http.routers.telegram-bot-webhook.entrypoints=websecure"
      - "traefik.http.routers.telegram-bot-webhook.tls=true"
      - "traefik.http.routers.telegram-bot-webhook.tls.certresolver=myresolver"
      - "traefik.http.routers.telegram-bot-webhook.priority=100"
      - "traefik.http.routers.telegram-bot-webhook.middlewares=webhook-whitelist,telegram-webhook-headers"
      - "traefik.http.routers.telegram-bot-webhook.service=telegram-bot"
      
      # Router for all other paths
      - "traefik.http.routers.telegram-bot-api.rule=Host(`${WEBHOOK_DOMAIN}`)"
      - "traefik.http.routers.telegram-bot-api.entrypoints=websecure"
      - "traefik.http.routers.telegram-bot-api.tls=true"
      - "traefik.http.routers.telegram-bot-api.tls.certresolver=myresolver"
      - "traefik.http.routers.telegram-bot-api.priority=50"
      - "traefik.http.routers.telegram-bot-api.middlewares=api-whitelist,telegram-webhook-headers"
      - "traefik.http.routers.telegram-bot-api.service=telegram-bot"
    restart: unless-stopped
    profiles: [ production ]
    networks:
      - traefik-network
  
  n8n:
    image: docker.n8n.io/n8nio/n8n
    container_name: n8n
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=${DATABASE__HOST}
      - DB_POSTGRESDB_PORT=${DATABASE__PORT}
      - DB_POSTGRESDB_USER=${DATABASE__USER}
      - DB_POSTGRESDB_PASSWORD=${DATABASE__PASSWORD}
      - DB_POSTGRESDB_DATABASE=${N8N_DBNAME}
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_USER}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD}
      - WEBHOOK_URL=${N8N_WEBHOOK_URL}
      - N8N_HOST=${N8N_WEBHOOK_DOMAIN}
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
      - TZ=${TIMEZONE}
    depends_on:
      create-n8n_db:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    volumes:
      - ./n8n_data:/home/node/.n8n
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.n8n-whitelist.ipwhitelist.sourcerange=${WHITELIST__LOCALHOST},${WHITELIST__ADDITIONAL_IPS}"
      - "traefik.http.routers.n8n.rule=Host(`${N8N_WEBHOOK_DOMAIN}`)"
      - "traefik.http.routers.n8n.entrypoints=websecure"
      - "traefik.http.routers.n8n.tls=true"
      - "traefik.http.routers.n8n.tls.certresolver=myresolver"
      - "traefik.http.routers.n8n.middlewares=n8n-whitelist"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"
    profiles: [ production ]
    ports:
      - "5678:5678"
    restart: unless-stopped
    networks:
      - traefik-network

# Development services (only for debugging while developing)
  postgres_dev:
    image: postgres:15
    container_name: postgresql_dev
    environment:
      POSTGRES_DB: ${DATABASE__BASENAME}
      POSTGRES_USER: ${DATABASE__USER}
      POSTGRES_PASSWORD: ${DATABASE__PASSWORD}
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DATABASE__USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles: [ development ]
    restart: unless-stopped

  dev:
    build: .
    container_name: polling_bot
    environment:
      - TELEGRAM__BOT_TOKEN=${TELEGRAM__BOT_TOKEN}
      - TELEGRAM__CREATOR_ID=${TELEGRAM__CREATOR_ID}
      - TELEGRAM__WEBHOOK_URL=${TELEGRAM__WEBHOOK_URL}
      - TELEGRAM__WEBHOOK_SECRET=${TELEGRAM__WEBHOOK_SECRET}
      - DATABASE__HOST=${DATABASE__HOST}
      - DATABASE__PORT=${DATABASE__PORT}
      - DATABASE__USER=${DATABASE__USER}
      - DATABASE__PASSWORD=${DATABASE__PASSWORD}
      - DATABASE__BASENAME=${DATABASE__BASENAME}
      - TZ=${TIMEZONE}
      - POLLING_MODE=True # Polling mode is always True for dev
    depends_on:
      postgres_dev:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./migrations:/app/migrations
    profiles: [ development ]
    restart: unless-stopped

volumes:
  postgres_data:
  postgres_dev_data:
  rabbitmq_data:
  n8n_data:

networks:
  traefik-network:
    external: false
